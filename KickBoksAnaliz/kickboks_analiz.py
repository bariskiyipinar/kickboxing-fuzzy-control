{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a66435b8-3073-42a4-9dd4-a26ba6ff4316",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox\n",
    "import numpy as np\n",
    "import skfuzzy as fuzz\n",
    "from skfuzzy import control as ctrl\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "from PIL import Image, ImageTk\n",
    "import requests\n",
    "from io import BytesIO\n",
    "\n",
    "# ---------- BULANIK DEƒûƒ∞≈ûKENLER VE KURALLAR ----------\n",
    "\n",
    "kalp_atisi = ctrl.Antecedent(np.arange(40, 181, 1), 'Kalp Atƒ±≈ü Hƒ±zƒ± (BPM)')\n",
    "kas_yorgunlugu = ctrl.Antecedent(np.arange(0, 11, 1), 'Kas Yorgunluƒüu (0-10)')\n",
    "onceki_set = ctrl.Antecedent(np.arange(0, 11, 1), '√ñnceki Set Zorluƒüu (0-10)')\n",
    "uyku = ctrl.Antecedent(np.arange(0, 11, 1), 'Uyku Kalitesi (0-10)')\n",
    "su = ctrl.Antecedent(np.arange(0, 4.1, 0.1), 'Su T√ºketimi (L)')\n",
    "\n",
    "antrenman_zorlugu = ctrl.Consequent(np.arange(0, 11, 1), 'Antrenman Zorluƒüu')\n",
    "dinlenme_suresi = ctrl.Consequent(np.arange(0, 61, 1), 'Dinlenme S√ºresi (dak)')\n",
    "\n",
    "# √úyelik fonksiyonlarƒ±\n",
    "kalp_atisi['d√º≈ü√ºk'] = fuzz.trimf(kalp_atisi.universe, [40, 40, 90])\n",
    "kalp_atisi['orta'] = fuzz.trimf(kalp_atisi.universe, [80, 110, 140])\n",
    "kalp_atisi['y√ºksek'] = fuzz.trimf(kalp_atisi.universe, [130, 180, 180])\n",
    "\n",
    "kas_yorgunlugu['az'] = fuzz.trimf(kas_yorgunlugu.universe, [0, 0, 5])\n",
    "kas_yorgunlugu['orta'] = fuzz.trimf(kas_yorgunlugu.universe, [3, 5, 7])\n",
    "kas_yorgunlugu['√ßok'] = fuzz.trimf(kas_yorgunlugu.universe, [6, 10, 10])\n",
    "\n",
    "onceki_set['kolay'] = fuzz.trimf(onceki_set.universe, [0, 0, 5])\n",
    "onceki_set['orta'] = fuzz.trimf(onceki_set.universe, [3, 5, 7])\n",
    "onceki_set['zor'] = fuzz.trimf(onceki_set.universe, [6, 10, 10])\n",
    "\n",
    "uyku['k√∂t√º'] = fuzz.trimf(uyku.universe, [0, 0, 5])\n",
    "uyku['orta'] = fuzz.trimf(uyku.universe, [3, 5, 7])\n",
    "uyku['iyi'] = fuzz.trimf(uyku.universe, [6, 10, 10])\n",
    "\n",
    "su['az'] = fuzz.trimf(su.universe, [0, 0, 2])\n",
    "su['yeterli'] = fuzz.trimf(su.universe, [1, 2, 3])\n",
    "su['√ßok'] = fuzz.trimf(su.universe, [2.5, 4, 4])\n",
    "\n",
    "antrenman_zorlugu['d√º≈ü√ºk'] = fuzz.trimf(antrenman_zorlugu.universe, [0, 0, 5])\n",
    "antrenman_zorlugu['orta'] = fuzz.trimf(antrenman_zorlugu.universe, [3, 5, 7])\n",
    "antrenman_zorlugu['y√ºksek'] = fuzz.trimf(antrenman_zorlugu.universe, [6, 10, 10])\n",
    "\n",
    "dinlenme_suresi['kƒ±sa'] = fuzz.trimf(dinlenme_suresi.universe, [0, 0, 20])\n",
    "dinlenme_suresi['orta'] = fuzz.trimf(dinlenme_suresi.universe, [15, 30, 45])\n",
    "dinlenme_suresi['uzun'] = fuzz.trimf(dinlenme_suresi.universe, [40, 60, 60])\n",
    "\n",
    "# Kurallar\n",
    "rule1 = ctrl.Rule(kalp_atisi['y√ºksek'] | kas_yorgunlugu['√ßok'] | onceki_set['zor'],\n",
    "                  (antrenman_zorlugu['y√ºksek'], dinlenme_suresi['uzun']))\n",
    "rule2 = ctrl.Rule(uyku['k√∂t√º'] | su['az'],\n",
    "                  (antrenman_zorlugu['d√º≈ü√ºk'], dinlenme_suresi['uzun']))\n",
    "rule3 = ctrl.Rule(kalp_atisi['orta'] & kas_yorgunlugu['orta'] & uyku['iyi'],\n",
    "                  (antrenman_zorlugu['orta'], dinlenme_suresi['orta']))\n",
    "rule4 = ctrl.Rule(kalp_atisi['d√º≈ü√ºk'] & kas_yorgunlugu['az'],\n",
    "                  (antrenman_zorlugu['d√º≈ü√ºk'], dinlenme_suresi['kƒ±sa']))\n",
    "\n",
    "training_system = ctrl.ControlSystem([rule1, rule2, rule3, rule4])\n",
    "training = ctrl.ControlSystemSimulation(training_system)\n",
    "\n",
    "# ---------- ARAY√úZ SINIFI ----------\n",
    "\n",
    "class KickboxingApp(tk.Tk):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.title(\"ü•ä Kickboks Antrenman Kontrolc√ºs√º ü•ä\")\n",
    "        self.geometry(\"650x900\")\n",
    "        self.configure(bg=\"#222831\")\n",
    "\n",
    "        url = \"https://images.pexels.com/photos/10689269/pexels-photo-10689269.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\"\n",
    "        try:\n",
    "            response = requests.get(url)\n",
    "            img_data = response.content\n",
    "            self.bg_image = Image.open(BytesIO(img_data)).resize((650, 900))\n",
    "            self.bg_photo = ImageTk.PhotoImage(self.bg_image)\n",
    "            self.bg_label = tk.Label(self, image=self.bg_photo)\n",
    "            self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)\n",
    "        except Exception as e:\n",
    "            messagebox.showwarning(\"Uyarƒ±\", f\"Arka plan resmi indirilemedi.\\n{e}\")\n",
    "\n",
    "        title = tk.Label(self, text=\"ü•ã Kickboks Antrenman Kontrolc√ºs√º\", font=(\"Helvetica\", 20, \"bold\"), fg=\"#00adb5\", bg=\"#222831\")\n",
    "        title.pack(pady=10)\n",
    "\n",
    "        self.entries = {}\n",
    "        self.inputs = [\n",
    "            (\"Kalp Atƒ±≈ü Hƒ±zƒ± (BPM)\", 40, 180, kalp_atisi),\n",
    "            (\"Kas Yorgunluƒüu (0-10)\", 0, 10, kas_yorgunlugu),\n",
    "            (\"√ñnceki Set Zorluƒüu (0-10)\", 0, 10, onceki_set),\n",
    "            (\"Uyku Kalitesi (0-10)\", 0, 10, uyku),\n",
    "            (\"Su T√ºketimi (L)\", 0, 4, su)\n",
    "        ]\n",
    "\n",
    "        for label_text, min_val, max_val, _ in self.inputs:\n",
    "            frame = tk.Frame(self, bg=\"#393e46\")\n",
    "            frame.pack(pady=5, padx=15, fill='x')\n",
    "            lbl = tk.Label(frame, text=label_text + \" üèãÔ∏è‚Äç‚ôÇÔ∏è\", font=(\"Helvetica\", 12), fg=\"#eeeeee\", bg=\"#393e46\")\n",
    "            lbl.pack(side=\"left\", padx=10)\n",
    "            entry = tk.Entry(frame, font=(\"Helvetica\", 12))\n",
    "            entry.pack(side=\"left\", fill='x', expand=True, padx=10)\n",
    "            self.entries[label_text] = (entry, min_val, max_val)\n",
    "\n",
    "        calc_btn = tk.Button(self, text=\"üöÄ Hesapla\", font=(\"Helvetica\", 14, \"bold\"), bg=\"#00adb5\", fg=\"#222831\", command=self.calculate)\n",
    "        calc_btn.pack(pady=15)\n",
    "\n",
    "        self.result_antrenman = tk.Label(self, text=\"\", font=(\"Helvetica\", 16, \"bold\"), fg=\"#ffd369\", bg=\"#222831\")\n",
    "        self.result_antrenman.pack(pady=5)\n",
    "        self.result_dinlenme = tk.Label(self, text=\"\", font=(\"Helvetica\", 16, \"bold\"), fg=\"#ffd369\", bg=\"#222831\")\n",
    "        self.result_dinlenme.pack(pady=5)\n",
    "\n",
    "        self.graph_frame = tk.Frame(self, bg=\"#222831\")\n",
    "        self.graph_frame.pack(pady=10, fill='both', expand=True)\n",
    "\n",
    "        self.canvas_antrenman = None\n",
    "        self.canvas_dinlenme = None\n",
    "        self.current_values = {}\n",
    "\n",
    "    def calculate(self):\n",
    "        try:\n",
    "            for label_text, min_val, max_val, _ in self.inputs:\n",
    "                val_str = self.entries[label_text][0].get()\n",
    "                val = float(val_str)\n",
    "                if not (min_val <= val <= max_val):\n",
    "                    raise ValueError(f\"{label_text} {min_val}-{max_val} aralƒ±ƒüƒ±nda olmalƒ±.\")\n",
    "                self.current_values[label_text] = val\n",
    "\n",
    "            training.input['Kalp Atƒ±≈ü Hƒ±zƒ± (BPM)'] = self.current_values[\"Kalp Atƒ±≈ü Hƒ±zƒ± (BPM)\"]\n",
    "            training.input['Kas Yorgunluƒüu (0-10)'] = self.current_values[\"Kas Yorgunluƒüu (0-10)\"]\n",
    "            training.input['√ñnceki Set Zorluƒüu (0-10)'] = self.current_values[\"√ñnceki Set Zorluƒüu (0-10)\"]\n",
    "            training.input['Uyku Kalitesi (0-10)'] = self.current_values[\"Uyku Kalitesi (0-10)\"]\n",
    "            training.input['Su T√ºketimi (L)'] = self.current_values[\"Su T√ºketimi (L)\"]\n",
    "\n",
    "            training.compute()\n",
    "\n",
    "            antrenman = training.output['Antrenman Zorluƒüu']\n",
    "            dinlenme = training.output['Dinlenme S√ºresi (dak)']\n",
    "\n",
    "            self.result_antrenman.config(text=f\"üèãÔ∏è Antrenman Zorluƒüu: {antrenman:.2f}\")\n",
    "            self.result_dinlenme.config(text=f\"üßò Dinlenme S√ºresi: {dinlenme:.2f} dakika\")\n",
    "\n",
    "            self.plot_results(antrenman_zorlugu, antrenman, True)\n",
    "            self.plot_results(dinlenme_suresi, dinlenme, False)\n",
    "\n",
    "        except ValueError as ve:\n",
    "            messagebox.showerror(\"Giri≈ü Hatasƒ±\", str(ve))\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Bir hata olu≈ütu:\\n{e}\")\n",
    "\n",
    "    def plot_results(self, variable, output_value, is_antrenman):\n",
    "        fig, ax = plt.subplots(figsize=(5, 1.8), dpi=100)\n",
    "        for term in variable.terms:\n",
    "            ax.plot(variable.universe, variable[term].mf, label=term)\n",
    "        ax.axvline(output_value, color='r', linestyle='--', label='√áƒ±ktƒ±')\n",
    "        ax.set_title(variable.label)\n",
    "        ax.legend(loc='upper right')\n",
    "        ax.grid(True)\n",
    "\n",
    "        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)\n",
    "        canvas.draw()\n",
    "        if is_antrenman:\n",
    "            if self.canvas_antrenman:\n",
    "                self.canvas_antrenman.get_tk_widget().destroy()\n",
    "            self.canvas_antrenman = canvas\n",
    "        else:\n",
    "            if self.canvas_dinlenme:\n",
    "                self.canvas_dinlenme.get_tk_widget().destroy()\n",
    "            self.canvas_dinlenme = canvas\n",
    "        canvas.get_tk_widget().pack(pady=5)\n",
    "\n",
    "# ---------- UYGULAMA BA≈ûLAT ----------\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app = KickboxingApp()\n",
    "    app.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05490e66-cf59-4a01-8976-8233a0ff1cf4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
